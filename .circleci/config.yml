version: 2.1

jobs:
  test-linux-arm:
    machine:
      image: default
    resource_class: arm.large
    environment:
      ENV_FILE: ci/deps/circle-311-arm64.yaml
      PYTEST_WORKERS: auto
      PATTERN: "not single_cpu and not slow and not network and not clipboard and not arm_slow and not db"
      PYTEST_TARGET: "pandas"
      PANDAS_CI: "1"
    steps:
      - checkout
      - run:
          name: Install Environment and Run Tests
          shell: /bin/bash -exo pipefail
          # https://pytest-qt.readthedocs.io/en/latest/troubleshooting.html#github-actions-azure-pipelines-travis-ci-and-gitlab-ci-cd
          command: |
            MINI_URL="https://github.com/conda-forge/miniforge/releases/download/24.3.0-0/Miniforge3-24.3.0-0-Linux-aarch64.sh"
            wget -q $MINI_URL -O Miniforge3.sh
            chmod +x Miniforge3.sh
            MINI_DIR="$HOME/miniconda3"
            rm -rf $MINI_DIR
            ./Miniforge3.sh -b -p $MINI_DIR
            export PATH=$MINI_DIR/bin:$PATH
            conda info -a
            conda env create -q -n pandas-dev -f $ENV_FILE
            conda list -n pandas-dev
            source activate pandas-dev
            if pip show pandas 1>/dev/null; then
                pip uninstall -y pandas
            fi
            python -m pip install --no-build-isolation -ve . -Csetup-args="--werror"
            PATH=$HOME/miniconda3/envs/pandas-dev/bin:$HOME/miniconda3/condabin:$PATH
            sudo apt-get update && sudo apt-get install -y libegl1 libopengl0
            ci/run_tests.sh
  test-linux-musl:
    docker:
      - image: quay.io/pypa/musllinux_1_1_aarch64
    resource_class: arm.large
    steps:
      # Install pkgs first to have git in the image
      # (needed for checkout)
      - run:
          name: Install System Packages
          command: |
            apk update
            apk add git
            apk add musl-locales
      - checkout
      - run:
          name: Install Environment and Run Tests
          command: |
            /opt/python/cp311-cp311/bin/python -m venv ~/virtualenvs/pandas-dev
            . ~/virtualenvs/pandas-dev/bin/activate
            python -m pip install --no-cache-dir -U pip wheel setuptools meson-python==0.13.1 meson[ninja]==1.2.1
            python -m pip install --no-cache-dir versioneer[toml] cython numpy python-dateutil pytest>=7.3.2 pytest-xdist>=3.4.0 hypothesis>=6.84.0
            python -m pip install --no-cache-dir --no-build-isolation -e . -Csetup-args="--werror"
            python -m pip list --no-cache-dir
            export PANDAS_CI=1
            python -m pytest -m 'not slow and not network and not clipboard and not single_cpu' pandas --junitxml=test-data.xml
  build-aarch64:
    parameters:
      cibw-build:
        type: string
    machine:
      image: default
    resource_class: arm.large
    environment:
      TRIGGER_SOURCE: << pipeline.trigger_source >>
    steps:
      - checkout
      - run:
          name: Check if build is necessary
          command: |
            # Check if tag is defined or TRIGGER_SOURCE is scheduled
            if [[ -n "$CIRCLE_TAG" ]]; then
                echo 'export IS_PUSH="true"' >> "$BASH_ENV"
            elif [[ $TRIGGER_SOURCE == "scheduled_pipeline" ]]; then
                echo 'export IS_SCHEDULE_DISPATCH="true"' >> "$BASH_ENV"
            # Look for the build label/[wheel build] in commit
            # grep takes a regex, so need to escape brackets
            elif (git log --format=oneline -n 1 $CIRCLE_SHA1) | grep -q '\[wheel build\]'; then
                : # Do nothing
            elif ! (curl https://api.github.com/repos/pandas-dev/pandas/issues/$CIRCLE_PR_NUMBER | jq '.labels' | grep -q 'Build'); then
                circleci-agent step halt
            fi
      - run:
          name: Build aarch64 wheels
          no_output_timeout: 30m # Sometimes the tests won't generate any output, make sure the job doesn't get killed by that
          command: |
            pip3 install cibuildwheel==2.20.0
            if [[ $CIBW_BUILD == cp313t* ]]; then
              # TODO: temporarily run 3.13 free threaded builds without build isolation
              # since we need pre-release cython
              CIBW_BUILD_FRONTEND="pip; args: --no-build-isolation" cibuildwheel --output-dir wheelhouse
            else
              cibuildwheel --output-dir wheelhouse
            fi

          environment:
            CIBW_BUILD: << parameters.cibw-build >>

      - run:
          name: Install Anaconda Client & Upload Wheels
          shell: /bin/bash -exo pipefail
          command: |
            MINI_URL="https://github.com/conda-forge/miniforge/releases/download/24.3.0-0/Miniforge3-24.3.0-0-Linux-aarch64.sh"
            wget -q $MINI_URL -O Miniforge3.sh
            chmod +x Miniforge3.sh
            MINI_DIR="$HOME/miniconda3"
            rm -rf $MINI_DIR
            ./Miniforge3.sh -b -p $MINI_DIR
            export PATH=$MINI_DIR/bin:$PATH
            conda install -y -c conda-forge anaconda-client
            source ci/upload_wheels.sh
            set_upload_vars
            upload_wheels
      - store_artifacts:
          path: wheelhouse/

workflows:
  test:
    # Don't run trigger this one when scheduled pipeline runs
    when:
      not:
        equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
    jobs:
      - test-linux-arm
  test-musl:
    # Don't run trigger this one when scheduled pipeline runs
    when:
      not:
        equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
    jobs:
      - test-linux-musl
  build-wheels:
    jobs:
      - build-aarch64:
          filters:
            tags:
              only: /^v.*/
          matrix:
            parameters:
              cibw-build: ["cp310-manylinux_aarch64",
                           "cp311-manylinux_aarch64",
                           "cp312-manylinux_aarch64",
                           "cp313-manylinux_aarch64",
                           "cp313t-manylinux_aarch64",
                           "cp310-musllinux_aarch64",
                           "cp311-musllinux_aarch64",
                           "cp312-musllinux_aarch64",
                           "cp313-musllinux_aarch64",
                           "cp313t-musllinux_aarch64"]
